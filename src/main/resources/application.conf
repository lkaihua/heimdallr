#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

akka {

  # Heimdallr Rainbow Project Version
  heimdallr-version = "orange"

  environment = {
    # Set environment type : development, standby, live
    live = {
      chatroom-receive-timeout = 10800 # 3 Hour
      redis-ip = "127.0.0.1"
      redis-port = 6379
    }

    standby = {
      chatroom-receive-timeout = 10800
      redis-ip = "127.0.0.1"
      redis-port = 6379
    }

    development = {
      chatroom-receive-timeout = 1800
      redis-ip = "192.168.99.100"
      redis-port = 6379
    }

    pubsub-channel = {
      prefix = "#heimdallr/"
      postfix = "#"
    }
  }

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "INFO"

  log-dead-letters-during-shutdown = off
  log-dead-letters = 5

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    default-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      # Configuration for the fork join pool - based on 8 Core
      thread-pool-executor {
        # minimum number of threads to cap factor-based core number to
        core-pool-size-min = 8
        # No of core threads ... ceil(available processors * factor)
        core-pool-size-factor = 2.0
        # maximum number of threads to cap factor-based number to
        core-pool-size-max = 32
      }
      # Throughput defines the maximum number of messages to be
      # processed per actor before the thread jumps to the next actor.
      # Set to 1 for as fair as possible.
      throughput = 100
    }
  }

  stream {
    # Default materializer settings
    materializer {

      # Initial size of buffers used in stream elements
      initial-input-buffer-size = 8
      # Maximum size of buffers used in stream elements
      max-input-buffer-size = 32

      # Fully qualified config path which holds the dispatcher configuration
      # to be used by ActorMaterializer when creating Actors.
      # When this value is left empty, the default-dispatcher will be used.
      dispatcher = ""

      # Cleanup leaked publishers and subscribers when they are not used within a given
      # deadline
      subscription-timeout {
        # when the subscription timeout is reached one of the following strategies on
        # the "stale" publisher:
        # cancel - cancel it (via `onError` or subscribing to the publisher and
        #          `cancel()`ing the subscription right away
        # warn   - log a warning statement about the stale element (then drop the
        #          reference to it)
        # noop   - do nothing (not recommended)
        mode = cancel

        # time after which a subscriber / publisher is considered stale and eligible
        # for cancelation (see `akka.stream.subscription-timeout.mode`)
        timeout = 5s
      }

      # Enable additional troubleshooting logging at DEBUG log level
      debug-logging = off

      # Maximum number of elements emitted in batch if downstream signals large demand
      output-burst-limit = 1000

      # Enable automatic fusing of all graphs that are run. For short-lived streams
      # this may cause an initial runtime overhead, but most of the time fusing is
      # desirable since it reduces the number of Actors that are created.
      # Deprecated, since Akka 2.5.0, setting does not have any effect.
      auto-fusing = on

      # Those stream elements which have explicit buffers (like mapAsync, mapAsyncUnordered,
      # buffer, flatMapMerge, Source.actorRef, Source.queue, etc.) will preallocate a fixed
      # buffer upon stream materialization if the requested buffer size is less than this
      # configuration parameter. The default is very high because failing early is better
      # than failing under load.
      #
      # Buffers sized larger than this will dynamically grow/shrink and consume more memory
      # per element than the fixed size buffers.
      max-fixed-buffer-size = 1000000000

      # Maximum number of sync messages that actor can process for stream to substream communication.
      # Parameter allows to interrupt synchronous processing to get upsteam/downstream messages.
      # Allows to accelerate message processing that happening withing same actor but keep system responsive.
      sync-processing-limit = 1000
      debug {
        # Enables the fuzzing mode which increases the chance of race conditions
        # by aggressively reordering events and making certain operations more
        # concurrent than usual.
        # This setting is for testing purposes, NEVER enable this in a production
        # environment!
        # To get the best results, try combining this setting with a throughput
        # of 1 on the corresponding dispatchers.
        fuzzing-mode = off
      }
    }
  }

  http {
    server {
     # The time after which an idle connection will be automatically closed.
     # Set to `infinite` to completely disable idle connection timeouts.
      idle-timeout = 60 s
      websocket {
        # periodic keep alive may be implemented using by sending Ping frames
        # upon which the other side is expected to reply with a Pong frame,
        # or by sending a Pong frame, which serves as unidirectional heartbeat.
        # Valid values:
        #   ping - default, for bi-directional ping/pong keep-alive heartbeating
        #   pong - for uni-directional pong keep-alive heartbeating
        #
        # It is also possible to provide a payload for each heartbeat message,
        # this setting can be configured programatically by modifying the websocket settings.
        # See: https://doc.akka.io/docs/akka-http/current/server-side/websocket-support.html
        periodic-keep-alive-mode = ping

        # Interval for sending periodic keep-alives
        # The frame sent will be the one configured in akka.http.server.websocket.periodic-keep-alive-mode
        # `infinite` by default, or a duration that is the max idle interval after which an keep-alive frame should be sent
        # The value `infinite` means that *no* keep-alive heartbeat will be sent, as: "the allowed idle time is infinite"
        periodic-keep-alive-max-idle = 10s
      }
    }

    client {
      # The time period within which the TCP connecting process must be completed.
      connecting-timeout = 1 min

      # The time after which an idle connection will be automatically closed.
      # Set to `infinite` to completely disable idle timeouts.
      idle-timeout = 60 s
      websocket {
        # periodic keep alive may be implemented using by sending Ping frames
        # upon which the other side is expected to reply with a Pong frame,
        # or by sending a Pong frame, which serves as unidirectional heartbeat.
        # Valid values:
        #   ping - default, for bi-directional ping/pong keep-alive heartbeating
        #   pong - for uni-directional pong keep-alive heartbeating
        #
        # See https://tools.ietf.org/html/rfc6455#section-5.5.2
        # and https://tools.ietf.org/html/rfc6455#section-5.5.3 for more information
        periodic-keep-alive-mode = ping

        # Interval for sending periodic keep-alives
        # The frame sent will be the onne configured in akka.http.server.websocket.periodic-keep-alive-mode
        # `infinite` by default, or a duration that is the max idle interval after which an keep-alive frame should be sent
        periodic-keep-alive-max-idle = 10s
      }
    }

    host-connection-pool {
      # The maximum number of parallel connections that a connection pool to a
      # single host endpoint is allowed to establish. Must be greater than zero.
      max-connections = 10

      # The maximum number of times failed requests are attempted again,
      # (if the request can be safely retried) before giving up and returning an error.
      # Set to zero to completely disable request retries.
      max-retries = 5

      # The maximum number of open requests accepted into the pool across all
      # materializations of any of its client flows.
      # Protects against (accidentally) overloading a single pool with too many client flow materializations.
      # Note that with N concurrent materializations the max number of open request in the pool
      # will never exceed N * max-connections * pipelining-limit.
      # Must be a power of 2 and > 0!
      max-open-requests = 131072

      # The time after which an idle connection pool (without pending requests)
      # will automatically terminate itself. Set to `infinite` to completely disable idle timeouts.
      idle-timeout = 30 s

      # The pool implementation to use. Currently supported are:
      #  - legacy: the original 10.0.x pool implementation
      #  - new: the pool implementation that became the default in 10.1.x and will receive fixes and new features
      pool-implementation = new

      # The "new" pool implementation will fail a connection early and clear the slot if a response entity was not
      # subscribed during the given time period after the response was dispatched. In busy systems the timeout might be
      # too tight if a response is not picked up quick enough after it was dispatched by the pool.
      response-entity-subscription-timeout = 10.second
    }
  }
}
